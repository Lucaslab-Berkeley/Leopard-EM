{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Py2DTM","text":"<p>Two-dimensional template-matching (2DTM) for in situ structural biology implemented in Python. This package reflects most of the functionality described in Lucas, et al. (2021)[^1].</p>"},{"location":"#installation","title":"Installation","text":"<p>Pre-packaged versions of Py2DTM are released on the Python Package Index (PyPI). We target Linux operating systems on Python 3.9 and above for these releases, and the PyTorch GPU acceleration backend is only tested against NVIDIA GPUs. With these caveats in mind, the package can be installed using pip:</p> <pre><code>pip install py2dtm\n</code></pre> <p>We also recommend you install the package in a virtual environment (such as conda) to avoid conflicts with other packages.</p>"},{"location":"#installing-from-source","title":"Installing from Source","text":"<p>To install the package from source, first clone the repository and install the package using pip:</p> <pre><code>git clone https://github.com/jdickerson95/tt2DTM.git\ncd tt2DTM\npip install .\n</code></pre>"},{"location":"#for-developers","title":"For Developers","text":"<p>For developers interested in contributing to the package, we recommend installing the package in an editable configuration with the necessary development dependencies:</p> <pre><code>git clone https://github.com/jdickerson95/tt2DTM.git\ncd tt2DTM\npip install -e '.[dev,test,docs]'\n</code></pre> <p>See the Contributing section for more information on how to contribute to the package.</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>A minimally working example of running the <code>match_template</code> program in a python script is shown below. Please see the examples page for more extensive explanations and demonstrations on how to configure, use, and extend the package.</p> <pre><code>from tt2dtm.pydantic_models import MatchTemplateManager\nfrom tt2dtm.pydantic_models import MatchTemplateResult\nfrom tt2dtm.pydantic_models import OpticsGroup\nfrom tt2dtm.pydantic_models import DefocusSearchConfig\nfrom tt2dtm.pydantic_models import OrientationSearchConfig\n\n# Microscope imaging parameters\nmy_optics_group = OpticsGroup(\n    label=\"my_optics_group\",\n    pixel_size=1.2,    # In Angstroms\n    voltage=300,       # In kV\n    defocus_u=5100.0,  # In Angstroms\n    defocus_v=4900.0,  # In Angstroms\n    defocus_astigmatism_angle=0.0,  # In degrees\n)\n\n# Relative defocus planes to search across\ndf_search_config = DefocusSearchConfig(\n    label=\"defocus_search\",\n    min_defocus=1000,   # In Angstroms, relative\n    max_defocus=-1000,  # In Angstroms, relative\n    step_size=200.0,    # In Angstroms\n)\n\n# Orientation sampling of SO(3) space\norientation_search_config = OrientationSearchConfig()\n\n# Where to save the output results\nmt_result = MatchTemplateResult(\n    allow_file_overwrite=True,\n    mip_path=\"/path/to/output_mip.mrc\",\n    scaled_mip_path=\"/path/to/output_scaled_mip.mrc\",\n    correlation_average_path=\"/path/to/output_correlation_average.mrc\",\n    correlation_variance_path=\"/path/to/output_correlation_variance.mrc\",\n    orientation_psi_path=\"/path/to/output_orientation_psi.mrc\",\n    orientation_theta_path=\"/path/to/output_orientation_theta.mrc\",\n    orientation_phi_path=\"/path/to/output_orientation_phi.mrc\",\n    relative_defocus_path=\"/path/to/output_relative_defocus.mrc\",\n    pixel_size_path=\"/path/to/output_pixel_size.mrc\",\n)\n\nmt_manager = MatchTemplateManager(\n    micrograph_path=\"/path/to/2D_image.mrc\",\n    template_volume_path=\"/path/to/template_volume.mrc\",\n    optics_group=my_optics_group,\n    defocus_search_config=df_search_config,\n    orientation_search_config=orientation_search_config,\n    match_template_result=mt_result,\n    # pixel_size_search_config\n    # preprocessing_filters\n    # computational_config\n)\n\n\ndef main():\n    # Batch size helps control GPU memory usage\n    mt_manager.run_match_template(orientation_batch_size=8)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"#documentation-and-examples","title":"Documentation and Examples","text":"<p>TODO</p>"},{"location":"#theory","title":"Theory","text":"<p>TODO</p>"},{"location":"#api","title":"API","text":"<p>TODO: Get some autodocs to parse the docstrings and generate API documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We encourage contributions to this package from the broader cryo-EM/ET and structural biology communities. Py2DTM is configured with a set of development dependencies to help contributors maintain code quality and consistency. See the Installation -- For Developers section for instructions on how to install these dependencies.</p>"},{"location":"#using-pre-commit","title":"Using <code>pre-commit</code>","text":"<p>The <code>pre-commit</code> package is used to run a set of code quality checks and auto-formatters on the codebase. If this is your first time installing the package, you will need to install the pre-commit hooks:</p> <pre><code>pre-commit install--install-hooks\n</code></pre> <p>After staging changes, but before making a commit, you can run the pre-commit checks with:</p> <pre><code>pre-commit run\n</code></pre> <p>This will go through the staged files, check that all the changed code adheres to the style guidelines, and auto-format the code where necessary. If all the tests pass, you can commit the changes.</p>"},{"location":"#running-tests","title":"Running Tests","text":"<p>Py2DTM uses the <code>pytest</code> package for running tests. To run the tests, simply run the following command from the root directory of the repository:</p> <pre><code>pytest\n</code></pre> <p>Note that we are still working on expanding the unit tests to cover more of the package, but we ask that any new code contributions include tests where appropriate.</p>"},{"location":"#building-documentation","title":"Building Documentation","text":"<p>The documentation for Py2DTM is built using MkDocs and Material for MkDocs for generating the documentation site. If you've installed the package with the optional <code>docs</code> dependencies, you can build the documentation site with the following command:</p> <pre><code>mkdocs build\nmkdocs serve\n</code></pre> <p>The first command will construct the HTML files for the documentation site, and the second command will start a local server (at <code>127.0.0.1:8000</code>) to view the site.</p>"},{"location":"#license","title":"License","text":"<p>The code in this repository is licensed under the BSD 3-Clause License. See the LICENSE file for full details.</p>"},{"location":"#references","title":"References","text":"<p>[^1]: Lucas BA, Himes BA, Xue L, Grant T, Mahamid J, Grigorieff N. Locating macromolecular assemblies in cells by 2D template matching with cisTEM. Elife. 2021 Jun 11;10:e68946. doi: 10.7554/eLife.68946. PMID: 34114559; PMCID: PMC8219381.</p>"}]}